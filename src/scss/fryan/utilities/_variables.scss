@import '../config';
@import '../varify/index';

@function color($color: 'un', $theme: 'light') {
  $color: order($color);
  @if map-has-key($color-light-map, $color) {
    @if $theme == 'light' {
      @return map-get($color-light-map, $color);
    }
    @else if $theme == 'dark' or $theme = 'd' {
      @if map-has-key($color-dark-map, $color) {
        @return map-get($color-dark-map, $color);
      }
      @else {
        @error 'Cant find `#{$color}` in dark color map.';
      }
    }
  } @else {
    @error 'Cant find `#{$color}` in colors map,
      [ un, deux, trois, quatre, cinq ] can use';
    @return '';
  }
}

@function breakpoint($breakpoint: 'md') {
  @if map-has-key($breakpoints, $breakpoint) {
    @return map-get($breakpoints, $breakpoint);
  } @else {
    @error 'Cant find `#{$breakpoint}` in breakpoints map,
      [ xs, sm, md, lg, xl, xxl, xxxl ] can use';
    @return '';
  }
}

$breakpoint-xs: var(--fr-breakpoint-xs);
$breakpoint-sm: var(--fr-breakpoint-sm);
$breakpoint-md: var(--fr-breakpoint-md);
$breakpoint-lg: var(--fr-breakpoint-lg);
$breakpoint-xl: var(--fr-breakpoint-xl);
$breakpoint-xxl: var(--fr-breakpoint-xxl);
$breakpoint-xxxl: var(--fr-breakpoint-xxxl);

@function spacing($space: 'un') {
  $space: order($space);
  @if map-has-key($spacing, $space) {
    @return map-get($spacing, $space);
  } @else {
    @error 'Cant find `#{$space}` in colors map,
      [ un, deux, trois, quatre, cinq ] can use';
    @return '';
  }
}

@function settings($theSize: 'un') {
  @if map-has-key($settings, $theSize) {
    @return map-get($settings, $theSize);
  } @else {
    @error 'Cant find `#{$theSize}` in size map';
    @return '';
  }
};
